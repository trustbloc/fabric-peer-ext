// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/config/ledgerconfig/config"
)

type ConfigService struct {
	GetStub        func(key *config.Key) (*config.Value, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		key *config.Key
	}
	getReturns struct {
		result1 *config.Value
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *config.Value
		result2 error
	}
	AddUpdateHandlerStub        func(handler config.UpdateHandler)
	addUpdateHandlerMutex       sync.RWMutex
	addUpdateHandlerArgsForCall []struct {
		handler config.UpdateHandler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConfigService) Get(key *config.Key) (*config.Value, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		key *config.Key
	}{key})
	fake.recordInvocation("Get", []interface{}{key})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(key)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *ConfigService) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *ConfigService) GetArgsForCall(i int) *config.Key {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].key
}

func (fake *ConfigService) GetReturns(result1 *config.Value, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *config.Value
		result2 error
	}{result1, result2}
}

func (fake *ConfigService) GetReturnsOnCall(i int, result1 *config.Value, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *config.Value
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *config.Value
		result2 error
	}{result1, result2}
}

func (fake *ConfigService) AddUpdateHandler(handler config.UpdateHandler) {
	fake.addUpdateHandlerMutex.Lock()
	fake.addUpdateHandlerArgsForCall = append(fake.addUpdateHandlerArgsForCall, struct {
		handler config.UpdateHandler
	}{handler})
	fake.recordInvocation("AddUpdateHandler", []interface{}{handler})
	fake.addUpdateHandlerMutex.Unlock()
	if fake.AddUpdateHandlerStub != nil {
		fake.AddUpdateHandlerStub(handler)
	}
}

func (fake *ConfigService) AddUpdateHandlerCallCount() int {
	fake.addUpdateHandlerMutex.RLock()
	defer fake.addUpdateHandlerMutex.RUnlock()
	return len(fake.addUpdateHandlerArgsForCall)
}

func (fake *ConfigService) AddUpdateHandlerArgsForCall(i int) config.UpdateHandler {
	fake.addUpdateHandlerMutex.RLock()
	defer fake.addUpdateHandlerMutex.RUnlock()
	return fake.addUpdateHandlerArgsForCall[i].handler
}

func (fake *ConfigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.addUpdateHandlerMutex.RLock()
	defer fake.addUpdateHandlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ConfigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Service = new(ConfigService)

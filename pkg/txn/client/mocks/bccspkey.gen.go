// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/bccsp"
)

type BCCSPKey struct {
	BytesStub        func() ([]byte, error)
	bytesMutex       sync.RWMutex
	bytesArgsForCall []struct{}
	bytesReturns     struct {
		result1 []byte
		result2 error
	}
	bytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SKIStub        func() []byte
	sKIMutex       sync.RWMutex
	sKIArgsForCall []struct{}
	sKIReturns     struct {
		result1 []byte
	}
	sKIReturnsOnCall map[int]struct {
		result1 []byte
	}
	SymmetricStub        func() bool
	symmetricMutex       sync.RWMutex
	symmetricArgsForCall []struct{}
	symmetricReturns     struct {
		result1 bool
	}
	symmetricReturnsOnCall map[int]struct {
		result1 bool
	}
	PrivateStub        func() bool
	privateMutex       sync.RWMutex
	privateArgsForCall []struct{}
	privateReturns     struct {
		result1 bool
	}
	privateReturnsOnCall map[int]struct {
		result1 bool
	}
	PublicKeyStub        func() (bccsp.Key, error)
	publicKeyMutex       sync.RWMutex
	publicKeyArgsForCall []struct{}
	publicKeyReturns     struct {
		result1 bccsp.Key
		result2 error
	}
	publicKeyReturnsOnCall map[int]struct {
		result1 bccsp.Key
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BCCSPKey) Bytes() ([]byte, error) {
	fake.bytesMutex.Lock()
	ret, specificReturn := fake.bytesReturnsOnCall[len(fake.bytesArgsForCall)]
	fake.bytesArgsForCall = append(fake.bytesArgsForCall, struct{}{})
	fake.recordInvocation("Bytes", []interface{}{})
	fake.bytesMutex.Unlock()
	if fake.BytesStub != nil {
		return fake.BytesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.bytesReturns.result1, fake.bytesReturns.result2
}

func (fake *BCCSPKey) BytesCallCount() int {
	fake.bytesMutex.RLock()
	defer fake.bytesMutex.RUnlock()
	return len(fake.bytesArgsForCall)
}

func (fake *BCCSPKey) BytesReturns(result1 []byte, result2 error) {
	fake.BytesStub = nil
	fake.bytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *BCCSPKey) BytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.BytesStub = nil
	if fake.bytesReturnsOnCall == nil {
		fake.bytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.bytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *BCCSPKey) SKI() []byte {
	fake.sKIMutex.Lock()
	ret, specificReturn := fake.sKIReturnsOnCall[len(fake.sKIArgsForCall)]
	fake.sKIArgsForCall = append(fake.sKIArgsForCall, struct{}{})
	fake.recordInvocation("SKI", []interface{}{})
	fake.sKIMutex.Unlock()
	if fake.SKIStub != nil {
		return fake.SKIStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sKIReturns.result1
}

func (fake *BCCSPKey) SKICallCount() int {
	fake.sKIMutex.RLock()
	defer fake.sKIMutex.RUnlock()
	return len(fake.sKIArgsForCall)
}

func (fake *BCCSPKey) SKIReturns(result1 []byte) {
	fake.SKIStub = nil
	fake.sKIReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *BCCSPKey) SKIReturnsOnCall(i int, result1 []byte) {
	fake.SKIStub = nil
	if fake.sKIReturnsOnCall == nil {
		fake.sKIReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.sKIReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *BCCSPKey) Symmetric() bool {
	fake.symmetricMutex.Lock()
	ret, specificReturn := fake.symmetricReturnsOnCall[len(fake.symmetricArgsForCall)]
	fake.symmetricArgsForCall = append(fake.symmetricArgsForCall, struct{}{})
	fake.recordInvocation("Symmetric", []interface{}{})
	fake.symmetricMutex.Unlock()
	if fake.SymmetricStub != nil {
		return fake.SymmetricStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.symmetricReturns.result1
}

func (fake *BCCSPKey) SymmetricCallCount() int {
	fake.symmetricMutex.RLock()
	defer fake.symmetricMutex.RUnlock()
	return len(fake.symmetricArgsForCall)
}

func (fake *BCCSPKey) SymmetricReturns(result1 bool) {
	fake.SymmetricStub = nil
	fake.symmetricReturns = struct {
		result1 bool
	}{result1}
}

func (fake *BCCSPKey) SymmetricReturnsOnCall(i int, result1 bool) {
	fake.SymmetricStub = nil
	if fake.symmetricReturnsOnCall == nil {
		fake.symmetricReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.symmetricReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *BCCSPKey) Private() bool {
	fake.privateMutex.Lock()
	ret, specificReturn := fake.privateReturnsOnCall[len(fake.privateArgsForCall)]
	fake.privateArgsForCall = append(fake.privateArgsForCall, struct{}{})
	fake.recordInvocation("Private", []interface{}{})
	fake.privateMutex.Unlock()
	if fake.PrivateStub != nil {
		return fake.PrivateStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.privateReturns.result1
}

func (fake *BCCSPKey) PrivateCallCount() int {
	fake.privateMutex.RLock()
	defer fake.privateMutex.RUnlock()
	return len(fake.privateArgsForCall)
}

func (fake *BCCSPKey) PrivateReturns(result1 bool) {
	fake.PrivateStub = nil
	fake.privateReturns = struct {
		result1 bool
	}{result1}
}

func (fake *BCCSPKey) PrivateReturnsOnCall(i int, result1 bool) {
	fake.PrivateStub = nil
	if fake.privateReturnsOnCall == nil {
		fake.privateReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.privateReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *BCCSPKey) PublicKey() (bccsp.Key, error) {
	fake.publicKeyMutex.Lock()
	ret, specificReturn := fake.publicKeyReturnsOnCall[len(fake.publicKeyArgsForCall)]
	fake.publicKeyArgsForCall = append(fake.publicKeyArgsForCall, struct{}{})
	fake.recordInvocation("PublicKey", []interface{}{})
	fake.publicKeyMutex.Unlock()
	if fake.PublicKeyStub != nil {
		return fake.PublicKeyStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.publicKeyReturns.result1, fake.publicKeyReturns.result2
}

func (fake *BCCSPKey) PublicKeyCallCount() int {
	fake.publicKeyMutex.RLock()
	defer fake.publicKeyMutex.RUnlock()
	return len(fake.publicKeyArgsForCall)
}

func (fake *BCCSPKey) PublicKeyReturns(result1 bccsp.Key, result2 error) {
	fake.PublicKeyStub = nil
	fake.publicKeyReturns = struct {
		result1 bccsp.Key
		result2 error
	}{result1, result2}
}

func (fake *BCCSPKey) PublicKeyReturnsOnCall(i int, result1 bccsp.Key, result2 error) {
	fake.PublicKeyStub = nil
	if fake.publicKeyReturnsOnCall == nil {
		fake.publicKeyReturnsOnCall = make(map[int]struct {
			result1 bccsp.Key
			result2 error
		})
	}
	fake.publicKeyReturnsOnCall[i] = struct {
		result1 bccsp.Key
		result2 error
	}{result1, result2}
}

func (fake *BCCSPKey) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bytesMutex.RLock()
	defer fake.bytesMutex.RUnlock()
	fake.sKIMutex.RLock()
	defer fake.sKIMutex.RUnlock()
	fake.symmetricMutex.RLock()
	defer fake.symmetricMutex.RUnlock()
	fake.privateMutex.RLock()
	defer fake.privateMutex.RUnlock()
	fake.publicKeyMutex.RLock()
	defer fake.publicKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BCCSPKey) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bccsp.Key = new(BCCSPKey)

// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"hash"
	"sync"

	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/core"
)

type CryptoSuite struct {
	KeyGenStub        func(opts core.KeyGenOpts) (k core.Key, err error)
	keyGenMutex       sync.RWMutex
	keyGenArgsForCall []struct {
		opts core.KeyGenOpts
	}
	keyGenReturns struct {
		result1 core.Key
		result2 error
	}
	keyGenReturnsOnCall map[int]struct {
		result1 core.Key
		result2 error
	}
	KeyImportStub        func(raw interface{}, opts core.KeyImportOpts) (k core.Key, err error)
	keyImportMutex       sync.RWMutex
	keyImportArgsForCall []struct {
		raw  interface{}
		opts core.KeyImportOpts
	}
	keyImportReturns struct {
		result1 core.Key
		result2 error
	}
	keyImportReturnsOnCall map[int]struct {
		result1 core.Key
		result2 error
	}
	GetKeyStub        func(ski []byte) (k core.Key, err error)
	getKeyMutex       sync.RWMutex
	getKeyArgsForCall []struct {
		ski []byte
	}
	getKeyReturns struct {
		result1 core.Key
		result2 error
	}
	getKeyReturnsOnCall map[int]struct {
		result1 core.Key
		result2 error
	}
	HashStub        func(msg []byte, opts core.HashOpts) (hash []byte, err error)
	hashMutex       sync.RWMutex
	hashArgsForCall []struct {
		msg  []byte
		opts core.HashOpts
	}
	hashReturns struct {
		result1 []byte
		result2 error
	}
	hashReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetHashStub        func(opts core.HashOpts) (h hash.Hash, err error)
	getHashMutex       sync.RWMutex
	getHashArgsForCall []struct {
		opts core.HashOpts
	}
	getHashReturns struct {
		result1 hash.Hash
		result2 error
	}
	getHashReturnsOnCall map[int]struct {
		result1 hash.Hash
		result2 error
	}
	SignStub        func(k core.Key, digest []byte, opts core.SignerOpts) (signature []byte, err error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		k      core.Key
		digest []byte
		opts   core.SignerOpts
	}
	signReturns struct {
		result1 []byte
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	VerifyStub        func(k core.Key, signature, digest []byte, opts core.SignerOpts) (valid bool, err error)
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		k         core.Key
		signature []byte
		digest    []byte
		opts      core.SignerOpts
	}
	verifyReturns struct {
		result1 bool
		result2 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CryptoSuite) KeyGen(opts core.KeyGenOpts) (k core.Key, err error) {
	fake.keyGenMutex.Lock()
	ret, specificReturn := fake.keyGenReturnsOnCall[len(fake.keyGenArgsForCall)]
	fake.keyGenArgsForCall = append(fake.keyGenArgsForCall, struct {
		opts core.KeyGenOpts
	}{opts})
	fake.recordInvocation("KeyGen", []interface{}{opts})
	fake.keyGenMutex.Unlock()
	if fake.KeyGenStub != nil {
		return fake.KeyGenStub(opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.keyGenReturns.result1, fake.keyGenReturns.result2
}

func (fake *CryptoSuite) KeyGenCallCount() int {
	fake.keyGenMutex.RLock()
	defer fake.keyGenMutex.RUnlock()
	return len(fake.keyGenArgsForCall)
}

func (fake *CryptoSuite) KeyGenArgsForCall(i int) core.KeyGenOpts {
	fake.keyGenMutex.RLock()
	defer fake.keyGenMutex.RUnlock()
	return fake.keyGenArgsForCall[i].opts
}

func (fake *CryptoSuite) KeyGenReturns(result1 core.Key, result2 error) {
	fake.KeyGenStub = nil
	fake.keyGenReturns = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) KeyGenReturnsOnCall(i int, result1 core.Key, result2 error) {
	fake.KeyGenStub = nil
	if fake.keyGenReturnsOnCall == nil {
		fake.keyGenReturnsOnCall = make(map[int]struct {
			result1 core.Key
			result2 error
		})
	}
	fake.keyGenReturnsOnCall[i] = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) KeyImport(raw interface{}, opts core.KeyImportOpts) (k core.Key, err error) {
	fake.keyImportMutex.Lock()
	ret, specificReturn := fake.keyImportReturnsOnCall[len(fake.keyImportArgsForCall)]
	fake.keyImportArgsForCall = append(fake.keyImportArgsForCall, struct {
		raw  interface{}
		opts core.KeyImportOpts
	}{raw, opts})
	fake.recordInvocation("KeyImport", []interface{}{raw, opts})
	fake.keyImportMutex.Unlock()
	if fake.KeyImportStub != nil {
		return fake.KeyImportStub(raw, opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.keyImportReturns.result1, fake.keyImportReturns.result2
}

func (fake *CryptoSuite) KeyImportCallCount() int {
	fake.keyImportMutex.RLock()
	defer fake.keyImportMutex.RUnlock()
	return len(fake.keyImportArgsForCall)
}

func (fake *CryptoSuite) KeyImportArgsForCall(i int) (interface{}, core.KeyImportOpts) {
	fake.keyImportMutex.RLock()
	defer fake.keyImportMutex.RUnlock()
	return fake.keyImportArgsForCall[i].raw, fake.keyImportArgsForCall[i].opts
}

func (fake *CryptoSuite) KeyImportReturns(result1 core.Key, result2 error) {
	fake.KeyImportStub = nil
	fake.keyImportReturns = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) KeyImportReturnsOnCall(i int, result1 core.Key, result2 error) {
	fake.KeyImportStub = nil
	if fake.keyImportReturnsOnCall == nil {
		fake.keyImportReturnsOnCall = make(map[int]struct {
			result1 core.Key
			result2 error
		})
	}
	fake.keyImportReturnsOnCall[i] = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) GetKey(ski []byte) (k core.Key, err error) {
	var skiCopy []byte
	if ski != nil {
		skiCopy = make([]byte, len(ski))
		copy(skiCopy, ski)
	}
	fake.getKeyMutex.Lock()
	ret, specificReturn := fake.getKeyReturnsOnCall[len(fake.getKeyArgsForCall)]
	fake.getKeyArgsForCall = append(fake.getKeyArgsForCall, struct {
		ski []byte
	}{skiCopy})
	fake.recordInvocation("GetKey", []interface{}{skiCopy})
	fake.getKeyMutex.Unlock()
	if fake.GetKeyStub != nil {
		return fake.GetKeyStub(ski)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getKeyReturns.result1, fake.getKeyReturns.result2
}

func (fake *CryptoSuite) GetKeyCallCount() int {
	fake.getKeyMutex.RLock()
	defer fake.getKeyMutex.RUnlock()
	return len(fake.getKeyArgsForCall)
}

func (fake *CryptoSuite) GetKeyArgsForCall(i int) []byte {
	fake.getKeyMutex.RLock()
	defer fake.getKeyMutex.RUnlock()
	return fake.getKeyArgsForCall[i].ski
}

func (fake *CryptoSuite) GetKeyReturns(result1 core.Key, result2 error) {
	fake.GetKeyStub = nil
	fake.getKeyReturns = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) GetKeyReturnsOnCall(i int, result1 core.Key, result2 error) {
	fake.GetKeyStub = nil
	if fake.getKeyReturnsOnCall == nil {
		fake.getKeyReturnsOnCall = make(map[int]struct {
			result1 core.Key
			result2 error
		})
	}
	fake.getKeyReturnsOnCall[i] = struct {
		result1 core.Key
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) Hash(msg []byte, opts core.HashOpts) (hash []byte, err error) {
	var msgCopy []byte
	if msg != nil {
		msgCopy = make([]byte, len(msg))
		copy(msgCopy, msg)
	}
	fake.hashMutex.Lock()
	ret, specificReturn := fake.hashReturnsOnCall[len(fake.hashArgsForCall)]
	fake.hashArgsForCall = append(fake.hashArgsForCall, struct {
		msg  []byte
		opts core.HashOpts
	}{msgCopy, opts})
	fake.recordInvocation("Hash", []interface{}{msgCopy, opts})
	fake.hashMutex.Unlock()
	if fake.HashStub != nil {
		return fake.HashStub(msg, opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.hashReturns.result1, fake.hashReturns.result2
}

func (fake *CryptoSuite) HashCallCount() int {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	return len(fake.hashArgsForCall)
}

func (fake *CryptoSuite) HashArgsForCall(i int) ([]byte, core.HashOpts) {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	return fake.hashArgsForCall[i].msg, fake.hashArgsForCall[i].opts
}

func (fake *CryptoSuite) HashReturns(result1 []byte, result2 error) {
	fake.HashStub = nil
	fake.hashReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) HashReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.HashStub = nil
	if fake.hashReturnsOnCall == nil {
		fake.hashReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.hashReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) GetHash(opts core.HashOpts) (h hash.Hash, err error) {
	fake.getHashMutex.Lock()
	ret, specificReturn := fake.getHashReturnsOnCall[len(fake.getHashArgsForCall)]
	fake.getHashArgsForCall = append(fake.getHashArgsForCall, struct {
		opts core.HashOpts
	}{opts})
	fake.recordInvocation("GetHash", []interface{}{opts})
	fake.getHashMutex.Unlock()
	if fake.GetHashStub != nil {
		return fake.GetHashStub(opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getHashReturns.result1, fake.getHashReturns.result2
}

func (fake *CryptoSuite) GetHashCallCount() int {
	fake.getHashMutex.RLock()
	defer fake.getHashMutex.RUnlock()
	return len(fake.getHashArgsForCall)
}

func (fake *CryptoSuite) GetHashArgsForCall(i int) core.HashOpts {
	fake.getHashMutex.RLock()
	defer fake.getHashMutex.RUnlock()
	return fake.getHashArgsForCall[i].opts
}

func (fake *CryptoSuite) GetHashReturns(result1 hash.Hash, result2 error) {
	fake.GetHashStub = nil
	fake.getHashReturns = struct {
		result1 hash.Hash
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) GetHashReturnsOnCall(i int, result1 hash.Hash, result2 error) {
	fake.GetHashStub = nil
	if fake.getHashReturnsOnCall == nil {
		fake.getHashReturnsOnCall = make(map[int]struct {
			result1 hash.Hash
			result2 error
		})
	}
	fake.getHashReturnsOnCall[i] = struct {
		result1 hash.Hash
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) Sign(k core.Key, digest []byte, opts core.SignerOpts) (signature []byte, err error) {
	var digestCopy []byte
	if digest != nil {
		digestCopy = make([]byte, len(digest))
		copy(digestCopy, digest)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		k      core.Key
		digest []byte
		opts   core.SignerOpts
	}{k, digestCopy, opts})
	fake.recordInvocation("Sign", []interface{}{k, digestCopy, opts})
	fake.signMutex.Unlock()
	if fake.SignStub != nil {
		return fake.SignStub(k, digest, opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.signReturns.result1, fake.signReturns.result2
}

func (fake *CryptoSuite) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *CryptoSuite) SignArgsForCall(i int) (core.Key, []byte, core.SignerOpts) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return fake.signArgsForCall[i].k, fake.signArgsForCall[i].digest, fake.signArgsForCall[i].opts
}

func (fake *CryptoSuite) SignReturns(result1 []byte, result2 error) {
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) SignReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) Verify(k core.Key, signature []byte, digest []byte, opts core.SignerOpts) (valid bool, err error) {
	var signatureCopy []byte
	if signature != nil {
		signatureCopy = make([]byte, len(signature))
		copy(signatureCopy, signature)
	}
	var digestCopy []byte
	if digest != nil {
		digestCopy = make([]byte, len(digest))
		copy(digestCopy, digest)
	}
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		k         core.Key
		signature []byte
		digest    []byte
		opts      core.SignerOpts
	}{k, signatureCopy, digestCopy, opts})
	fake.recordInvocation("Verify", []interface{}{k, signatureCopy, digestCopy, opts})
	fake.verifyMutex.Unlock()
	if fake.VerifyStub != nil {
		return fake.VerifyStub(k, signature, digest, opts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.verifyReturns.result1, fake.verifyReturns.result2
}

func (fake *CryptoSuite) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *CryptoSuite) VerifyArgsForCall(i int) (core.Key, []byte, []byte, core.SignerOpts) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return fake.verifyArgsForCall[i].k, fake.verifyArgsForCall[i].signature, fake.verifyArgsForCall[i].digest, fake.verifyArgsForCall[i].opts
}

func (fake *CryptoSuite) VerifyReturns(result1 bool, result2 error) {
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) VerifyReturnsOnCall(i int, result1 bool, result2 error) {
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CryptoSuite) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.keyGenMutex.RLock()
	defer fake.keyGenMutex.RUnlock()
	fake.keyImportMutex.RLock()
	defer fake.keyImportMutex.RUnlock()
	fake.getKeyMutex.RLock()
	defer fake.getKeyMutex.RUnlock()
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	fake.getHashMutex.RLock()
	defer fake.getHashMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CryptoSuite) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.CryptoSuite = new(CryptoSuite)
